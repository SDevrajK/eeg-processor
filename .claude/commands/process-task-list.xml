<?xml version="1.0" encoding="UTF-8"?>
<claude_command>
  <metadata>
    <name>process_task_list</name>
    <version>2.1</version>
    <description>Execute tasks one at a time with completion tracking and user approval - Research Enhanced</description>
    <target_environment>claude_code</target_environment>
  </metadata>

  <input>
    <parameter name="task_file" type="file_reference" required="true">
      <description>Path to task list XML file with completion tracking</description>
      <validation>Must contain hierarchical task structure with completion_tracking section</validation>
    </parameter>
    <parameter name="start_task" type="string" optional="true">
      <description>Specific task ID to start with (e.g., "1.1")</description>
      <default>Next uncompleted task after verification</default>
    </parameter>
    <parameter name="autonomous" type="boolean" optional="true" default="false">
      <description>Execute all tasks without user approval</description>
    </parameter>
  </input>

  <execution>
    <workflow>
      <step name="initialize_session" order="0">
        <description>Check task list state and handle resumption</description>
        <logic>
          <rule>Read task file and parse completion_tracking section</rule>
          <rule>If any tasks marked as "completed", verify the last completed task</rule>
          <rule>Confirm last completed task implementation is still present and functional</rule>
          <rule>Report completion status summary to user</rule>
        </logic>
        <verification_protocol>
          <action>Identify last completed task from completion_tracking</action>
          <action>Check if corresponding files/code exist and are functional</action>
          <action>Report verification status to user</action>
          <action>If verification fails, mark task as "pending" and restart from there</action>
        </verification_protocol>
      </step>

      <step name="identify_next_task" order="1">
        <description>Find the next uncompleted task</description>
        <logic>
          <rule>Process tasks in numerical order (1, 2, 3, etc.)</rule>
          <rule>Skip completed tasks marked with status="completed"</rule>
          <rule>If start_task specified, begin there (after verification)</rule>
          <rule>If no uncompleted tasks, report project completion</rule>
        </logic>
      </step>

      <step name="execute_task" order="2">
        <description>Implement the identified task</description>
        <actions>
          <action>Update task status to "in_progress" in completion_tracking</action>
          <action>Implement the specific task functionality</action>
          <action>Create or modify relevant files</action>
          <action>Ensure code quality and proper documentation</action>
          <action>Handle research-specific requirements (data validation, statistical checks, etc.)</action>
        </actions>
      </step>

      <step name="update_completion" order="3">
        <description>Mark task as completed and update tracking</description>
        <completion_protocol>
          <rule>Update completion_tracking section for completed task</rule>
          <rule>Set status="completed"</rule>
          <rule>Set completed_date="{current_timestamp}"</rule>
          <rule>Set completed_by="claude"</rule>
          <rule>Add notes about implementation details or issues encountered</rule>
          <rule>Update "Relevant Files" section with any new/modified files</rule>
          <rule>Save updated task file immediately</rule>
        </completion_protocol>
      </step>

      <step name="request_approval" order="4">
        <description>Pause for user review and approval</description>
        <behavior>
          <rule>MUST wait for user approval before next task</rule>
          <rule>Accept "yes", "y", "continue", "next" as approval</rule>
          <rule>If user provides feedback, address before proceeding</rule>
          <rule>Do NOT start next task without explicit permission</rule>
          <rule>Allow user to mark tasks as "user completed" if they implemented manually</rule>
        </behavior>
      </step>
    </workflow>

    <loop>
      <condition>While uncompleted tasks exist AND user approves continuation</condition>
      <break_conditions>
        <condition>All tasks completed (status="completed")</condition>
        <condition>User requests pause</condition>
        <condition>Blocking issue encountered</condition>
      </break_conditions>
    </loop>
  </execution>

  <completion_tracking_management>
    <update_format>
      <template>
        &lt;task id="{task_id}"&gt;
          &lt;status&gt;completed&lt;/status&gt;
          &lt;completed_date&gt;{YYYY-MM-DD HH:MM}&lt;/completed_date&gt;
          &lt;completed_by&gt;claude&lt;/completed_by&gt;
          &lt;notes&gt;{implementation_notes}&lt;/notes&gt;
        &lt;/task&gt;
      </template>
    </update_format>
    
    <user_override>
      <description>Allow user to manually update completion status</description>
      <commands>
        <command>Mark task X as completed by user</command>
        <command>Add notes to task X completion</command>
        <command>Reset task X to pending</command>
      </commands>
    </user_override>
    
    <verification_on_resume>
      <description>When resuming a partially completed project</description>
      <steps>
        <step>Parse completion_tracking to find completed tasks</step>
        <step>Verify last completed task implementation exists</step>
        <step>Test basic functionality of last completed component</step>
        <step>Report verification results</step>
        <step>Continue from next pending task</step>
      </steps>
    </verification_on_resume>
  </completion_tracking_management>

  <task_maintenance>
    <file_updates>
      <action>Update task completion status in completion_tracking section</action>
      <action>Maintain "Relevant Files" section accuracy</action>
      <action>Add newly discovered files as needed</action>
      <action>Preserve all existing completion data</action>
    </file_updates>
    
    <relevant_files_format>
      <entry>
        <pattern>`path/to/file.ext` - Brief description of purpose</pattern>
        <include_tests>Always include corresponding test files</include_tests>
      </entry>
    </relevant_files_format>
  </task_maintenance>

  <behavior>
    <rule condition="autonomous=false">ONE task at a time - never start next without approval</rule>
    <rule condition="autonomous=false">Update completion_tracking after each task</rule>
    <rule condition="autonomous=false">Verify last completed task when resuming</rule>
    <rule condition="autonomous=false">Maintain file tracking throughout process</rule>
    <rule condition="autonomous=false">Stop and wait after each task completion</rule>
    <rule condition="autonomous=true">Execute all tasks sequentially without pausing</rule>
    <rule>Handle research-specific error scenarios (data issues, statistical failures)</rule>
    <rule>Support manual completion marking by user</rule>
  </behavior>

  <error_handling>
    <scenario name="blocking_issue">
      <action>Update task status to "blocked" in completion_tracking</action>
      <action>Add detailed notes about the blocker</action>
      <action>Suggest next steps or alternatives</action>
      <action>Do not proceed to next task until blocker resolved</action>
    </scenario>
    
    <scenario name="task_unclear">
      <action>Request clarification from user</action>
      <action>Do not guess or assume requirements</action>
      <action>Wait for clear direction before proceeding</action>
      <action>Update task notes with clarification received</action>
    </scenario>
    
    <scenario name="verification_failure">
      <action>Mark previously "completed" task as "pending"</action>
      <action>Add notes about what verification failed</action>
      <action>Restart implementation from the failed task</action>
    </scenario>
    
    <scenario name="research_specific_errors">
      <action>Handle data loading/parsing failures gracefully</action>
      <action>Report statistical assumption violations</action>
      <action>Document analysis parameter issues</action>
      <action>Suggest alternative approaches for methodological problems</action>
    </scenario>
  </error_handling>

  <usage_example>
    <command>process_task_list tasks-prd-eeg-filtering.xml</command>
    <expected_flow>
      1. Check if any tasks already completed, verify last completed task
      2. Find next uncompleted task (e.g., task 3 if 1-2 completed)
      3. Update task status to "in_progress"
      4. Implement the task
      5. Update completion_tracking with "completed" status, timestamp, and notes
      6. Wait for user "yes" to continue
      7. Repeat for next uncompleted task
    </expected_flow>
  </usage_example>

  <completion_indicators>
    <task>Update completion_tracking status to "completed" when finished</task>
    <project>All tasks in completion_tracking marked as "completed"</project>
    <verification>Last completed task functionality verified on resume</verification>
  </completion_indicators>
</claude_command>